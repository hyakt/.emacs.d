;; -*- mode: lisp -*-

fundamental-mode ;; Available everywhere

(today (format-time-string "%Y-%m-%d"))

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK ")

lisp-mode emacs-lisp-mode ;; Specify multiple modes

(lambda "(lambda (" p ")" n> r> ")")

emacs-lisp-mode

(lambda "(lambda (" p ")" n> r> ")")
(var "(defvar " p "\n  \"" p "\")")
(const "(defconst " p "\n  \"" p "\")")
(custom "(defcustom " p "\n  \"" p "\"" n> ":type '" p ")")
(face "(defface " p " '((t :inherit " p "))\n  \"" p "\")")
(group "(defgroup " p " nil\n  \"" p "\"" n> ":group '" p n> ":prefix \"" p "-\")")
(macro "(defmacro " p " (" p ")\n  \"" p "\"" n> r> ")")
(fun "(defun " p " (" p ")\n  \"" p "\"" n> r> ")")
(let "(let (" p ")" n> r> ")")
(star "(let* (" p ")" n> r> ")")
(rec "(letrec (" p ")" n> r> ")")
(command "(defun " p " (" p ")\n  \"" p "\"" n> "(interactive)" n> r> ")")

js-mode js2-mode typescript-ts-mode web-mode

(cl "console.log(`"(s variable)": `, "(s variable)");")
(cll "console.log(" p ");")
(clb "console.log(`%c" p "`, \"color: #465DAA; font-size: 1.2em; font-weight: bold;\")")
(cld "console.dir(" p ");")
(wait1000 "await new Promise(resolve => setTimeout(resolve, " (p "1000") "));")
(disable-eslint "/* eslint-disable " p " */")
(disable-eslint-line "// eslint-disable-line " p)
(disable-eslint-next-line "// eslint-disable-next-line " p)
(imp "import " p " from '" p "'; ")
(kiritori "console.log(\"------------------------------\");")
(range "[...Array(" p ")].map((_, i) => i)")

typescript-ts-mode

(disable-ts "// @ts-expect-error " p)

web-mode css-mode

(med "@media (" p ") {" n> p n> "}")
(pc "@media (--viewport-pc) {" n> p n> "}")

vue-mode

(init "<script setup lang=\"ts\">\n" p "</script>\n\n<template>\n</template>\n\n<style scoped lang=\"scss\">\n</style>")

rust-mode

(p "println!(\"" (s variable) ": {:?}\", " (s variable) ");")
(dd "#[derive(Debug)]")
(at "#[test]")
(ai "#[ignore = \"not yet implemented\"]")
(strjoin p ".iter().map(|x| x.to_string()).collect::<Vec<String>>().join(\" \");")

java-mode

(class "public class " (p (file-name-base (or (buffer-file-name) (buffer-name)))) " {" n> r> n "}")

rst-mode

(title (make-string (length title) ?=) n (p "Title: " title) n (make-string (length title) ?=) n)

text-mode

(cut "--8<---------------cut here---------------start------------->8---" n r n
     "--8<---------------cut here---------------end--------------->8---" n)
(asciibox "+-" (make-string (length str) ?-) "-+" n
          "| " (s str)                       " |" n
          "+-" (make-string (length str) ?-) "-+" n)

latex-mode

(begin "\\begin{" (s env) "}" > n> r> "\\end{" (s env) "}")
(frac "\\frac{" p "}{" p "}")
(enumerate "\\begin{enumerate}\n\\item " r> n> "\\end{enumerate}")
(itemize "\\begin{itemize}\n\\item " r> n> "\\end{itemize}")

org-mode

(title "#+title: " p n "#+author: Hayato Kajiyama" n "#+language: en" n n)
(quote "#+begin_quote" n> r> n> "#+end_quote")
(example "#+begin_example" n> r> n> "#+end_example")
(center "#+begin_center" n> r> n> "#+end_center")
(comment "#+begin_comment" n> r> n> "#+end_comment")
(verse "#+begin_verse" n> r> n> "#+end_verse")
(src "#+begin_src " p n> r> n> "#+end_src")
(elisp "#+begin_src emacs-lisp" n> r> n "#+end_src")
(chat "#+begin_ai markdown" n> r> n "#+end_ai")
(image "#+begin_ai :image :size 256x256 :n 1" n> (p "Hyper realistic sci-fi rendering of super complicatedt echnical machine.") n "#+end_ai")
(js "#+begin_src js" n> r> n "#+end_src")
(todo "* TODO " p)
